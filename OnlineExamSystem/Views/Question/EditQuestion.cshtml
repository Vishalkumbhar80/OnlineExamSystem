@model OnlineExamSystem.Models.Question
@{
    ViewData["Title"] = "Edit Question";
}

<h2>Edit Question for Exam @Model.ExamConfigId</h2>

<form asp-action="EditQuestionDetail" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="ExamConfigId" />

    <div class="mb-3">
        <label asp-for="Title" class="form-label">Question Title</label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label asp-for="Marks" class="form-label">Marks</label>
            <input asp-for="Marks" class="form-control" type="number" step="0.01" />
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <div class="form-check">
                <input asp-for="IsMultipleAnswer" class="form-check-input" />
                <label asp-for="IsMultipleAnswer" class="form-check-label">Multiple correct answers</label>
            </div>
        </div>
    </div>

    <div class="mb-2">
        <label class="form-label">Options</label>
        <div id="optionsContainer">
            @if (Model.Options != null)
            {
                for (int i = 0; i < Model.Options.Count; i++)
                {
                    <div class="option-item mb-2 border rounded p-2" data-index="@i">
                        <div class="row g-2 align-items-center">
                            <div class="col-auto d-flex align-items-center">
                                <input type="hidden" name="Options[@i].IsCorrect" value="@(Model.Options[i].IsCorrect ? "true" : "false")" class="hidden-iscorrect" />
                                <input type="checkbox" class="chk-iscorrect" @(Model.Options[i].IsCorrect ? "checked" : "") />
                            </div>
                            <div class="col">
                                <input type="text" name="Options[@i].OptionText" class="form-control option-text" value="@Model.Options[i].OptionText" placeholder="Option text" />
                                <span asp-validation-for="Options[@i].OptionText" class="text-danger"></span>
                            </div>
                            <div class="col-auto">
                                <button type="button" class="btn btn-sm btn-danger remove-option">Remove</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <button type="button" id="addOptionBtn" class="btn btn-secondary btn-sm mt-2">Add Option</button>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Save Question</button>
    <a asp-action="ConfigQuestion" asp-route-examId="@Model.ExamConfigId" class="btn btn-secondary mt-3">Back</a>
</form>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
                function addOption(optionText = '', isCorrect = false) {
                    var index = $('#optionsContainer .option-item').length;
                    var html = `
        <div class="option-item mb-2 border rounded p-2" data-index="${index}">
          <div class="row g-2 align-items-center">
            <div class="col-auto d-flex align-items-center">
              <input type="hidden" name="Options[${index}].IsCorrect" value="${isCorrect ? 'true' : 'false'}" class="hidden-iscorrect" />
              <input type="checkbox" class="chk-iscorrect" ${isCorrect ? 'checked' : ''} />
            </div>
            <div class="col">
              <input type="text" name="Options[${index}].OptionText" class="form-control option-text" value="${optionText.replace(/"/g,'&quot;')}" placeholder="Option text" />
            </div>
            <div class="col-auto">
              <button type="button" class="btn btn-sm btn-danger remove-option">Remove</button>
            </div>
          </div>
        </div>`;
                    $('#optionsContainer').append(html);
                }

                function reIndexOptions() {
                    $('#optionsContainer .option-item').each(function(i, el) {
                        $(el).attr('data-index', i);
                        $(el).find('.hidden-iscorrect').attr('name', `Options[${i}].IsCorrect`);
                        $(el).find('.option-text').attr('name', `Options[${i}].OptionText`);
                    });
                }

                $(function () {
                    // Checkbox change updates hidden input
                    $('#optionsContainer').on('change', '.chk-iscorrect', function () {
                        var $row = $(this).closest('.option-item');
                        $row.find('.hidden-iscorrect').val($(this).is(':checked') ? 'true' : 'false');
                    });

                    // Add option
                    $('#addOptionBtn').on('click', function () {
                        addOption('', false);
                        reIndexOptions();
                    });

                    // Remove option
                    $('#optionsContainer').on('click', '.remove-option', function () {
                        $(this).closest('.option-item').remove();
                        reIndexOptions();
                    });

                    // Sync hidden inputs before submit
                    $('form').on('submit', function () {
                        $('#optionsContainer .option-item').each(function () {
                            var $row = $(this);
                            var $chk = $row.find('.chk-iscorrect');
                            var $hidden = $row.find('.hidden-iscorrect');
                            $hidden.val($chk.is(':checked') ? 'true' : 'false');
                        });
                    });
                });
    </script>
}
